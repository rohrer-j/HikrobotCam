# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import hikrobot_pb2 as hikrobot__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hikrobot_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class HikRobotCameraServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/hikrobot.HikRobotCameraService/Connect',
                request_serializer=hikrobot__pb2.ConnectRequest.SerializeToString,
                response_deserializer=hikrobot__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.GetImage = channel.unary_unary(
                '/hikrobot.HikRobotCameraService/GetImage',
                request_serializer=hikrobot__pb2.GetImageRequest.SerializeToString,
                response_deserializer=hikrobot__pb2.GetImageResponse.FromString,
                _registered_method=True)
        self.SetExposure = channel.unary_unary(
                '/hikrobot.HikRobotCameraService/SetExposure',
                request_serializer=hikrobot__pb2.SetExposureRequest.SerializeToString,
                response_deserializer=hikrobot__pb2.SetExposureResponse.FromString,
                _registered_method=True)
        self.SetGain = channel.unary_unary(
                '/hikrobot.HikRobotCameraService/SetGain',
                request_serializer=hikrobot__pb2.SetGainRequest.SerializeToString,
                response_deserializer=hikrobot__pb2.SetGainResponse.FromString,
                _registered_method=True)
        self.SetFrameRate = channel.unary_unary(
                '/hikrobot.HikRobotCameraService/SetFrameRate',
                request_serializer=hikrobot__pb2.SetFrameRateRequest.SerializeToString,
                response_deserializer=hikrobot__pb2.SetFrameRateResponse.FromString,
                _registered_method=True)


class HikRobotCameraServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExposure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFrameRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HikRobotCameraServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=hikrobot__pb2.ConnectRequest.FromString,
                    response_serializer=hikrobot__pb2.ConnectResponse.SerializeToString,
            ),
            'GetImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImage,
                    request_deserializer=hikrobot__pb2.GetImageRequest.FromString,
                    response_serializer=hikrobot__pb2.GetImageResponse.SerializeToString,
            ),
            'SetExposure': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExposure,
                    request_deserializer=hikrobot__pb2.SetExposureRequest.FromString,
                    response_serializer=hikrobot__pb2.SetExposureResponse.SerializeToString,
            ),
            'SetGain': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGain,
                    request_deserializer=hikrobot__pb2.SetGainRequest.FromString,
                    response_serializer=hikrobot__pb2.SetGainResponse.SerializeToString,
            ),
            'SetFrameRate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFrameRate,
                    request_deserializer=hikrobot__pb2.SetFrameRateRequest.FromString,
                    response_serializer=hikrobot__pb2.SetFrameRateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hikrobot.HikRobotCameraService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hikrobot.HikRobotCameraService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HikRobotCameraService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hikrobot.HikRobotCameraService/Connect',
            hikrobot__pb2.ConnectRequest.SerializeToString,
            hikrobot__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hikrobot.HikRobotCameraService/GetImage',
            hikrobot__pb2.GetImageRequest.SerializeToString,
            hikrobot__pb2.GetImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetExposure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hikrobot.HikRobotCameraService/SetExposure',
            hikrobot__pb2.SetExposureRequest.SerializeToString,
            hikrobot__pb2.SetExposureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetGain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hikrobot.HikRobotCameraService/SetGain',
            hikrobot__pb2.SetGainRequest.SerializeToString,
            hikrobot__pb2.SetGainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFrameRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hikrobot.HikRobotCameraService/SetFrameRate',
            hikrobot__pb2.SetFrameRateRequest.SerializeToString,
            hikrobot__pb2.SetFrameRateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
